{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPhKk5NmIymlJ5GVnJjtgNw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"THeDaJiiT1Bg","executionInfo":{"status":"ok","timestamp":1713881775707,"user_tz":-330,"elapsed":5976,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"f3109399-811d-4a51-f670-e73bec18b5ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 5\n","Odd\n"]}],"source":["#even&odd\n","import re\n","def lexer(input_str):\n","    if re.match(r'\\d+', input_str):\n","        num = int(input_str)\n","        if num % 2 == 0:\n","            return \"Even\"\n","        else:\n","            return \"Odd\"\n","    else:\n","        return \"Not a number\"\n","\n","# Test the lexer\n","input_str = input(\"Enter a number: \")\n","result = lexer(input_str)\n","print(result)\n"]},{"cell_type":"code","source":["#lagest word\n","import re\n","def largest_word(text):\n","    words = re.findall(r'\\b\\w+\\b', text)\n","    return max(words, key=len)\n","\n","# Example usage:\n","text = \"This is a sample sentence with several words of different lengths\"\n","print(\"The largest word is:\", largest_word(text))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kwu5b7sWUGlM","executionInfo":{"status":"ok","timestamp":1713881806514,"user_tz":-330,"elapsed":499,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"410dc6d0-322a-4676-c4bf-36fd150fe7df"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["The largest word is: different\n"]}]},{"cell_type":"code","source":["#prime number\n","def is_prime(n):\n","    if n <= 1:\n","        return False\n","    if n <= 3:\n","        return True\n","    if n % 2 == 0 or n % 3 == 0:\n","        return False\n","    i = 5\n","    while i * i <= n:\n","        if n % i == 0 or n % (i + 2) == 0:\n","            return False\n","        i += 6\n","    return True\n","\n","number = int(input(\"Enter a number: \"))\n","if is_prime(number):\n","    print(number, \"is a prime number\")\n","else:\n","    print(number, \"is not a prime number\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X5W4JUVsURsC","executionInfo":{"status":"ok","timestamp":1713881843214,"user_tz":-330,"elapsed":3834,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"1dac772f-21d8-4aeb-9384-d7ee57950ec3"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 7\n","7 is a prime number\n"]}]},{"cell_type":"code","source":["#vowels\n","import re\n","\n","def lexer(input_string):\n","    vowels = re.findall('[aeiouAEIOU]', input_string)\n","    return vowels\n","\n","input_string = input(\"Enter a string: \")\n","print(\"Vowels in the string:\", lexer(input_string))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wohELqKuUZMe","executionInfo":{"status":"ok","timestamp":1713881868431,"user_tz":-330,"elapsed":4231,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"8c22fd7b-9997-410d-fabc-8f52454b6f83"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a string: i\n","Vowels in the string: ['i']\n"]}]},{"cell_type":"code","source":["#identifier and keyword\n","def lexer(input_string):\n","    keywords = ['if', 'else', 'while', 'for', 'return', 'int', 'float', 'bool']  # List of keywords\n","    identifier_regex = r'^[a-zA-Z_]\\w*$'  # Regular expression for identifiers\n","\n","    tokens = []  # List to store tokens\n","\n","    # Split input string into tokens\n","    for token in input_string.split():\n","        if token in keywords:\n","            tokens.append((token, 'Keyword'))\n","        elif re.match(identifier_regex, token):\n","            tokens.append((token, 'Identifier'))\n","        else:\n","            tokens.append((token, 'Invalid'))\n","\n","    return tokens\n","\n","# Example usage\n","input_string = \"if x == 5 else while y < 10 for z in range(5) return\"\n","tokens = lexer(input_string)\n","for token in tokens:\n","    print(token)\n"],"metadata":{"id":"Qa4gKcMFUf5F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#operator\n","import re\n","\n","def lex(input_string):\n","    tokens = []\n","    operators = r'[+\\-*/=]'\n","    matches = re.findall(operators, input_string)\n","    for match in matches:\n","        tokens.append((match, \"OPERATOR\"))\n","    return tokens\n","\n","input_string = input(\"Enter a string: \")\n","print(lex(input_string))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V8xiMWupUpke","executionInfo":{"status":"ok","timestamp":1713881997294,"user_tz":-330,"elapsed":5600,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"8a63ac0b-7b19-4f7e-b249-42e5cf6a0757"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a string: 5+7\n","[('+', 'OPERATOR')]\n"]}]},{"cell_type":"code","source":["#To implement Lexical Analyzer programs (identifier, keywords)(JAVA/C/C++/Python/R-lang /Lex).\n","\n","import re\n","\n","def lexer(input_string):\n","    keywords = {'if', 'else', 'while', 'for', 'int', 'float', 'return'}\n","    tokens = re.findall(r'\\b\\w+\\b', input_string)\n","    for token in tokens:\n","        if token in keywords:\n","            print(f'{token}: keyword')\n","        else:\n","            print(f'{token}: identifier')\n","\n","# Example usage:\n","input_string = input(\"Enter code: \")\n","lexer(input_string)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7hCvBImVVHY9","executionInfo":{"status":"ok","timestamp":1713882073561,"user_tz":-330,"elapsed":4385,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"cfef0708-a195-4dda-92c7-07c21bf20a24"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter code: for\n","for: keyword\n"]}]},{"cell_type":"code","source":["#To implement Lexical Analyzer programs (operators) (JAVA/C/C++/Python/R-lang/Lex).\n","import re\n","\n","def lexer(input_string):\n","    operators = ['+', '-', '*', '/', '=', '<', '>', '==', '!=', '<=', '>=', '&&', '||', '!', '&', '|']\n","    tokens = re.findall(r'[-+*/=<>!&|]+', input_string)\n","    for token in tokens:\n","        if token in operators:\n","            print(f'{token}: operator')\n","\n","# Example usage:\n","input_string = input(\"Enter code: \")\n","lexer(input_string)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4QadoeH_VRT6","executionInfo":{"status":"ok","timestamp":1713890484114,"user_tz":-330,"elapsed":12928,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"ec60e7ff-7a2f-47c6-ad38-5ba90b35d7fe"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter code: 25+087\n","+: operator\n"]}]},{"cell_type":"code","source":["#Write a program to remove left recursion by direct method for a given set of production rules (JAVA/C/C++/Python/R-lang /Lex).\n","\n","def remove_left_recursion(productions):\n","    new_productions = {}\n","    non_terminals = list(productions.keys())\n","\n","    for A in non_terminals:\n","        alpha = []\n","        beta = []\n","\n","        for production in productions[A]:\n","            if production.startswith(A):\n","                alpha.append(production[1:])\n","            else:\n","                beta.append(production)\n","\n","        if alpha:\n","            A_prime = A + \"'\"\n","            new_productions[A_prime] = [a + A_prime for a in alpha] + ['']\n","            new_productions[A] = [b + A_prime for b in beta]\n","        else:\n","            new_productions[A] = productions[A]\n","\n","    return new_productions\n","\n","# Example usage\n","if name == \"main\":\n","    # Define your grammar rules\n","    productions = {\n","          'A': ['Ab', 'Aa', 'c']\n","    }\n","\n","    # Remove left recursion\n","    new_productions = remove_left_recursion(productions)\n","\n","    # Print the modified grammar\n","    for non_terminal, productions in new_productions.items():\n","        print(non_terminal, \"->\", \" | \".join(productions))"],"metadata":{"id":"9WrK51XxVYzM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#To implement of any one parser (LL(1) FIRST) (JAVA/C/C++, Python, R-lang, Lex).\n","def first(productions, non_terminal):\n","    first_set = set()\n","\n","    if non_terminal not in productions:\n","        return first_set\n","\n","    for expression in productions[non_terminal]:\n","        if expression[0].islower() or expression[0] == '':\n","            first_set.add(expression[0])\n","        elif expression[0].isupper():\n","            first_set.update(first(productions, expression[0]))\n","\n","    return first_set\n","\n","# Example usage:\n","productions = {\n","    'S': ['ab', 'bA']\n","}\n","non_terminal = 'S'\n","first_set = first(productions, non_terminal)\n","print(f'First({non_terminal}):Â {first_set}')"],"metadata":{"id":"wqtJvVRVVno3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#To implement of any one parser (LL(1) FOLLOW) (JAVA/C/C++, Python, R-lang, Lex).\n","\n","def first(productions, non_terminal):\n","  first_set = set()\n","\n","if non_terminal not in productions:\n","    return first_set\n","\n","    for expression in productions[non_terminal]:\n","       if expression[0].islower() or expression[0] == '':\n","         first_set.add(expression[0])\n","           elif expression[0].isupper():\n","             first_set.update(first(productions, expression[0]))\n","\n","   return first_set\n","\n","def follow(productions, start_symbol, non_terminal):\n","    follow_set = set()\n","\n","    if non_terminal == start_symbol:\n","      follow_set.add('$')\n","\n","    for key, value in productions.items():\n","        for expression in value:\n","            for index, symbol in enumerate(expression):\n","              if symbol == non_terminal and index < len(expression) - 1:\n","                follow_set.update(first(productions, expression[index + 1]))\n","                   elif symbol == non_terminal and key != non_terminal:\n","                follow_set.update(follow(productions, start_symbol, key))\n","\n","    return follow_set\n","\n","# Example usage:\n","productions = {\n","    'S': ['AB'],\n","    'A': ['a'],\n","    'B': ['b']\n","}\n","start_symbol = 'S'\n","non_terminal = 'A'\n","follow_set = follow(productions, start_symbol, non_terminal)\n","print(f'Follow({non_terminal}):Â {follow_set}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"goz8wUBSVvGd","executionInfo":{"status":"error","timestamp":1713882453930,"user_tz":-330,"elapsed":434,"user":{"displayName":"021_Tanmay Sakpal","userId":"17674634169655536947"}},"outputId":"9c03d3b4-0d77-410c-b666-dddab9d5fa33"},"execution_count":12,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unindent does not match any outer indentation level (<tokenize>, line 15)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m15\u001b[0m\n\u001b[0;31m    return first_set\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"]}]},{"cell_type":"code","source":["#To study & implement Code Generation Algorithm. (JAVA/C/C++/Python/R-lang /Lex).\n","\n","def generate_assembly(expression):\n","    assembly_code = \"\"\n","    assembly_code += \"MOV R0, \" + expression.split()[0] + \"\\n\"\n","    assembly_code += \"MOV R1, \" + expression.split()[2] + \"\\n\"\n","    if \"+\" in expression:\n","        assembly_code += \"ADD R0, R1\\n\"\n","    elif \"-\" in expression:\n","        assembly_code += \"SUB R0, R1\\n\"\n","    elif \"*\" in expression:\n","        assembly_code += \"MUL R0, R1\\n\"\n","    elif \"/\" in expression:\n","        assembly_code += \"DIV R0, R1\\n\"\n","    return assembly_code\n","\n","# Example usage:\n","expression = input(\"Enter expression (e.g., a + b): \")\n","assembly_code = generate_assembly(expression)\n","print(\"Generated Assembly Code:\")\n","print(assembly_code)"],"metadata":{"id":"8YTgUhnMWwpI"},"execution_count":null,"outputs":[]}]}